<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query;
use Gedmo\Translatable\Query\TreeWalker\TranslationWalker;
use Gedmo\Translatable\TranslatableListener;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    private function loadTranslationMetaData($locale)
    {
        $translatableListener = new TranslatableListener();
        $translatableListener->setTranslatableLocale($locale);
        $translatableListener->setDefaultLocale('en');
        $translatableListener->setTranslationFallback(true);
        $this->_em->getEventManager()->addEventSubscriber($translatableListener);
    }

    public function getById($id, $locale)
    {
        $this->loadTranslationMetaData($locale);

        return $this->_em->createQueryBuilder()
            ->select(['post', 'category', 'author', 'user'])
            ->from('AppBundle:Post', 'post')
            ->innerJoin('post.author', 'author')
            ->innerJoin('post.category', 'category')
            ->innerJoin('author.user', 'user')
            ->where('post.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->setHint(
                TranslatableListener::HINT_TRANSLATABLE_LOCALE,
                $locale
            )
            ->setHint(
                Query::HINT_CUSTOM_OUTPUT_WALKER,
                TranslationWalker::class
            )
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getAll($locale)
    {
        $this->loadTranslationMetaData($locale);

        return $this->_em->createQueryBuilder()
            ->select(['p', 'o', 'c', 'u'])
            ->from('AppBundle:Post', 'p')
            ->innerJoin('p.author', 'o')
            ->innerJoin('p.category', 'c')
            ->innerJoin('o.user', 'u')
            ->getQuery()
            ->setHint(
                TranslatableListener::HINT_TRANSLATABLE_LOCALE,
                $locale
            )
            ->setHint(
                Query::HINT_CUSTOM_OUTPUT_WALKER,
                TranslationWalker::class
            )
            ->getResult();

    }
}
